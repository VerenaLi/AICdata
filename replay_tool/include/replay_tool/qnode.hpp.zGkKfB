/**
 * @file /include/replay_tool/qnode.hpp
 *
 * @brief Communications central!
 *
 * @date February 2011
 **/
/*****************************************************************************
** Ifdefs
*****************************************************************************/

#ifndef replay_tool_QNODE_HPP_
#define replay_tool_QNODE_HPP_

/*****************************************************************************
** Includes
*****************************************************************************/

// To workaround boost/qt4 problems that won't be bugfixed. Refer to
//    https://bugreports.qt.io/browse/QTBUG-22829
#ifndef Q_MOC_RUN
#include <ros/ros.h>
#endif
#include <string>
#include <QThread>
#include <QStringListModel>
#include <QFileDialog>


#include "datathread.h"



#include <fstream>
#include <iostream>
#include <sstream>
#include <QObject>
#include <QThread>
#include <QMutex>
#include <QPixmap>
#include <QVector>
#include <QVector3D>
#include <QDateTime>
#include <QReadLocker>
#include <QPainter>
#include <QLabel>
#include <algorithm>
#include <ros/ros.h>
#include <ros/time.h>

#include <sensor_msgs/PointCloud2.h>
#include <sensor_msgs/Image.h>
#include <sensor_msgs/LaserScan.h>
#include <rosgraph_msgs/Clock.h>
#include <map>
//#include <camera_info_manager/camera_info_manager.h>
#include <std_msgs/String.h>
#include <std_msgs/Bool.h>
#include <std_srvs/SetBool.h>
#include <std_msgs/Int64MultiArray.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float64.h>
#include <sensor_msgs/NavSatFix.h>
#include <sensor_msgs/LaserScan.h>
#include <sensor_msgs/CameraInfo.h>
#include <sensor_msgs/SetCameraInfo.h>

#include <sensor_msgs/Imu.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include <QStringListModel>
#include <iostream>
#include <fstream>
#include <limits>
#include <sstream>
#include <string>
#include <ros/ros.h>
#include <boost/algorithm/string.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/locale.hpp>
#include <boost/program_options.hpp>
#include <boost/progress.hpp>
#include <boost/tokenizer.hpp>
#include <cv_bridge/cv_bridge.h>
#include <image_transport/image_transport.h>
#include <opencv/cv.h>
#include <opencv/highgui.h>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <pcl_conversions/pcl_conversions.h>
#include <pcl/point_cloud.h>
#include <pcl/point_types.h>

#include<queue>


#include <visualization_msgs/Marker.h>
#include <visualization_msgs/MarkerArray.h>
#include <sensor_msgs/distortion_models.h>
#include <sensor_msgs/image_encodings.h>
#include <sensor_msgs/Imu.h>
#include <sensor_msgs/NavSatFix.h>
#include <sensor_msgs/PointCloud2.h>
#include <stereo_msgs/DisparityImage.h>
#include <std_msgs/Bool.h>
#include <tf/LinearMath/Transform.h>
#include <tf/transform_datatypes.h>

#include <time.h>





using namespace std;

class Publishers : public QThread
{
    Q_OBJECT
public:
    explicit Publishers(QObject *parent = 0,QMutex *p_mutex = 0);

    ~Publishers();
    void ros_init(ros::NodeHandle &n);
    ros::NodeHandle nh_;
    bool init();
    void run();
    void Ready();
    QMutex *mutex_;

    void ResetProcessStamp(int position);











    double array[17];




    int64_t initial_data_stamp_;
    int64_t last_data_stamp_;

    bool auto_start_flag_;
    int stamp_show_count_;

    bool play_flag_;
    bool pause_flag_;
    bool loop_flag_;
    bool stop_skip_flag_;
    double play_rate_;
    string load_path_;
    int imu_play_flag_;
    int velodyne_32_play_flag_;
    int velodyne_16_play_flag_;
    int gnss_play_flag_;
    int stereo_play_flag_;
    int bfs_play_flag_;
    ros::Publisher Velodyne_16_pub_;
    ros::Publisher Velodyne_32_pub_;
    ros::Publisher Stereo_pub_;
    ros::Publisher Bfs_pub_;
    ros::Publisher Gnss_pub_;
    ros::Publisher Imu_pub_;
    ros::Publisher Clock_pub_;



    ros::Subscriber start_sub_;
    ros::Subscriber stop_sub_;
    void Velodyne_16_pub_thread();
    void Velodyne_32_pub_thread();
    void Stereo_pub_thread();
    void Bfs_pub_thread();
    void Gnss_pub_thread();
    void Imu_pub_thread();
    void DataStampThread();


    ros::Timer timer_;




    void TimerCallback(const ros::TimerEvent&);
    int64_t processed_stamp_;
    int64_t pre_timer_stamp_;
    bool reset_process_stamp_flag_;




signals:
    void StampShow(quint64 stamp);
    void StartSignal();
    bool velodyne_16_check();

Q_SIGNALS:
    void loggingUpdated();
    void rosShutdown();


    void loggingUpdated_sub();

private:


    void FilePlayerStart(const std_msgs::BoolConstPtr& msg);
    void FilePlayerStop(const std_msgs::BoolConstPtr& msg);



        void load();
//        void Velodyne_16_pub_thread();
//        void Velodyne_32_pub_thread();
//        void Stereo_pub_thread();
//        void Bfs_32_pub_thread();
//        void Gnss_pub_thread();
//        void Imu_pub_thread();
        int getTime_stamp();
        int getGNSS();
        int getIMU();



private:
    int search_bound_;
    int init_argc;
    char** init_argv;
    ros::Publisher chatter_publisher;
    QStringListModel logging_model;




    bool stereo_active_;
    bool bfs_active_;

    int64_t prev_clock_stamp_;







    pair<string,sensor_msgs::PointCloud2> velodyne_16_next_;
    pair<string,sensor_msgs::PointCloud2> velodyne_32_next_;
    vector<string> velodyne_16_file_list_;
    vector<string> velodyne_32_file_list_;

    multimap<int64_t, string>               data_stamp_;

    map<int64_t, sensor_msgs::NavSatFix>    gnss_data_;


    map<int64_t, sensor_msgs::Imu>         imu_data_;



    DataThread<int64_t> data_stamp_thread_; //defined in include/file_player/datathread.h

    DataThread<int64_t> gnss_thread_;




    std::queue<long> imu_queue;
    long imu_data;








    DataThread<int64_t> imu_thread_;
    DataThread<int64_t> bfs_thread_;
    DataThread<int64_t> stereo_thread_;
    DataThread<int64_t> velodyne_16_thread_;
    DataThread<int64_t> velodyne_32_thread_;

    map<int64_t, int64_t> stop_period_; //start and stop stamp



    int GetDirList(string dir, vector<string> &files);




public slots:

};// namespace replay_tool

#endif /* replay_tool_QNODE_HPP_ */
